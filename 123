package dataStructure;

import java.io.BufferedReader;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.nio.charset.Charset;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Random;

//https://jeong-pro.tistory.com/70
//https://ex-now-fu.tistory.com/22
//https://offbyone.tistory.com/192
public class Main2 {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		
		Csv csv = new Csv();
		
		List<List<String>> list = csv.read();
		
		for(List<String> chList : list) {
			System.out.println(chList);
		}
		
		
		List<Integer> arr =  new ArrayList<>();
		Random rd = new Random();
		
		
		for(int i = 0; i<100;i++) {
			
			arr.add(rd.nextInt(20) + 1);
			
		}
		
		M m = new M(100);
		
		Pro pro = new Pro(arr,m);
		
		System.out.println(pro.simu());
		

	}
	
	

}



class M{
	
	private int addMo;
	
	public M(int addMo) {
		this.addMo = addMo;
		
	}
	
	public int getAddMo() {
		return addMo;
	}
	//매 입금
	//시작 끝 상승 배열
	//폭락 랜덤 체크
	
	//손해시 매도
	//퍼센트지가 동일 하면 매수
	//

}


class Pro{
	
	private List<Integer> arr;
	public static int bi = 5;
	public static int per = (int)(100 / bi);
	
	
	M m;
	
	public Pro(List<Integer> arr,M m) {
		this.arr = arr;
		this.m = m;
		
	}
	
	double simu(){
		
		Random rd = new Random();
		double nu = 0;
		
		for(int val : arr) {
			nu += m.getAddMo();
			
			
			System.out.println("현재값==> " + nu);
			
			try {
			if(m.getAddMo() <= 0) {
				System.out.println("die");
				return m.getAddMo();
			}
			
			if(bi == rd.nextInt(per)) {
				int rdi =  rd.nextInt(90) + 1;
				nu = nu - (nu * (rdi * 0.01));
				System.out.println("비율==> -" + rdi);
				Thread.sleep(5000);
			}else {
				nu = nu + (nu * (val * 0.01));
				System.out.println("비율==> " + val);
				
			}
			System.out.println("계산값==> " + (int)nu);
			System.out.println(" ============ ");

			
				Thread.sleep(500);
			} catch (InterruptedException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			
		}
		
		return nu;
		
	}	
}

class Csv{
	
	
	List<List<String>> read(){
		
		//반환용 리스트
	    List<List<String>> ret = new ArrayList<List<String>>();
	    BufferedReader br = null;
	    
	    try{
	        br = Files.newBufferedReader(Paths.get("C:\\Users\\apro\\Downloads\\qqq.csv"));
	        String line = "";
	        
	        while((line = br.readLine()) != null){
	            //CSV 1행을 저장하는 리스트
	            List<String> tmpList = new ArrayList<String>();
	            String array[] = line.split(",");
	            //배열에서 리스트 반환
	            tmpList = Arrays.asList(array);
	            System.out.println(new String(line.getBytes("ISO_8859_1"),"utf-8"));
	            ret.add(tmpList);
	        }
	    }catch(FileNotFoundException e){
	        e.printStackTrace();
	    }catch(IOException e){
	        e.printStackTrace();
	    }finally{
	        try{
	            if(br != null){
	                br.close();
	            }
	        }catch(IOException e){
	            e.printStackTrace();
	        }
	    }
	    
	    return ret;
	}
		
	
}





